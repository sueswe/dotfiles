#!/bin/bash

function usage {
  echo -e "Usage: $(basename $0) \e[36m [gc|get|br|--source for@bar]\e[0m \n"
  echo ""
  echo "* Clone from a remote filelist:"
  echo "   $(basename $0) --source user@remote:/foo/projects.ist"
  echo ""
  echo "* Check localy:"
  echo "   gc  = run garbagecollector"
  echo "   get = git pull origin master"
  echo "   br  = show branches"
  echo ""
  # echo "$(basename $0) checks only .git - directories."
  echo ""
}

function clonewar {
  source=$1
  echo "Clone from: $source"
  scp $source .
  projectList=$(basename $source)
  remote=$(dirname $source)
  echo "loop through $projectList"
  for r in $(cat $projectList); do
    git clone $remote/$r || {
      echo "Ups, that didn't work. "
    }
  done
  exit 1
}

reposToPush=""
changesOpen=""

if [[ $1 == "--source" ]]; then
  shift
  clonewar $@
fi

if [[ "$1" == "--help" || "$1" == "-?" ]]; then
  usage
  exit 1
fi

C=0
for n in $(ls -d */); do
  C=$(expr $C + 1)
  echo -e "\n $C # Checking \e[1;36m$n\e[0m (master) ... "
  cd $n

  if [[ ! -d ".git" ]]; then
    echo -e "\t\t\t\t\t\t\t \e[1;33m skipped.\e[0m (not a git-repo) "
    cd ..
    continue
  fi

  echo -e "Checking out master ... "
  git checkout master 2> /dev/null
  git fetch -p
  # if [ "$1" == "b" ]; then echo -e "\n\e[33mBRANCHES:\e[0m\n"; git branch -av; echo -e "\t\t\t\t\tSTATE: \c"; fi

  git status | grep clean
  if [ $? -ne 0 ]; then
    #echo -e "\t_________________________________"
    echo -e "\t\t\t\t\t\t\t \e[1;31mChanges open\e[0m"
    git status | grep modif
    #echo -e "\t_________________________________"
    changesOpen="${changesOpen} $n"
    #exit 1
  else
    echo -e "\t\t\t\t\t\t\t \e[1;32mOK\e[0m"
    if [[ "$1" == "gc" ]]; then
      echo -e " \e[1;21m>performing a gc:\e[0m"
      git gc
      echo -e " \e[1;21m>performing a fsck:\e[0m"
      git fsck
    elif [[ "$1" == "get" ]]; then
      git pull origin master 2> /dev/null
      if [ $? -ne 0 ]; then
        echo -e "\t\t\e[41mPULL NOT POSSIBLE! \e[0m"
      fi
    fi

    to_push=$(git status | grep -E 'git push')
    if [[ ! -z $to_push ]]; then
      echo -e "\t\t\t\t\e[43mYOU HAVE TO PUSH SOME CHANGES. =) \e[0m"
      reposToPush="${reposToPush} $n"
    fi
    to_pull=$(git status | grep -E 'git pull')
    if [[ ! -z $to_pull ]]; then
      echo -e "\t\t\t\t\e[44mYOU CAN PULL SOME CHANGES. =) \e[0m"
    fi

    if [[ "$1" == "br" ]]; then
      echo "branches _without_ master:"
      echo -e "\e[1;35m"
      git branch -a | grep -v master
      echo -e "\e[0m"
    fi
  fi

  #YOUR=$(git status | grep -i your | wc -l)
  #if [ $YOUR -ne 0 ]; then
  #    echo $n
  #    git status
  #    #echo ""
  #fi

  cd ..
  echo " "
done
echo ""
echo "$C repositories OK."
echo ""
if [[ ! -z $reposToPush ]]; then
  echo -e "Repos you could \e[1;36mpush\e[0m: $reposToPush"
fi

if [[ ! -z $changesOpen ]]; then
  echo -e "\n\e[1;35mChanges open\e[0m:       $changesOpen"
fi
