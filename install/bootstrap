#!/bin/bash

echo 'bootstrap v0.9.3'

DOTFILES_ROOT="`pwd`"

##############################################################################

info () {
    echo -e "\e[0;35m💡\033[0m $1 "
}

success () {
    echo -e "\e[0;32m👍\033[0m $1 "
}

fail () {
    echo -e "\e[0;31m😣\033[0m $1 "
}

warn () {
    echo -e "\e[0;33m⚠\033[0m $1 "
}

##############################################################################

#
# installing new .profile
#
mv -f ~/.profile ~/.profile.bak 2>/dev/null || {
    info "no old ~/.profile found. Good. \n"
    }
$(export | grep OS | grep -i windows)
rtc=$?
if [ $rtc -eq 0 ]; then
    info "it seems we are under Windows Msysgit \n"
    info "installing new .profile ... \n"
    cp -f profile/profile.msysgit ~/.profile
    rtc=$?
else
    info "it seems we are under Linux \n"
    info "installing new .profile ... \n"
    cp -f profile/profile.unix ~/.profile
    rtc=$?
fi
if [ "$rtc" -ne 0 ]; then { fail "copy failed."; exit $rtc ; } else { info "done.\n" ; } fi
chmod 0750 ~/.profile


#
# linking .profile to .bash_profile
#
info "linking .profile to .bash_profile \n"
if [ -e ~/.bash_profile ] ; then
    warn "Saving old .bash_profile \n"
    mv -f ~/.bash_profile ~/.bash_profile.backup
    ln -sf ~/.profile ~/.bash_profile
else
    ln -sf ~/.profile ~/.bash_profile
fi


#
# adding . .profile to .bashrc
#
if [ -e ~/.bashrc ]; then
    info ".bashrc found ... \n"
    if [[ $(grep '.profile' ~/.bashrc) ]]; then
        info ".profile - string already exists in ~/.bashrc \n"
    else
        info "adding source .profile ...\n"
        echo '. ~/.profile' >> ~/.bashrc
    fi
fi



#
# installing ~/bin
#
mkdir ~/bin 2>/dev/null || {
    info "~/bin already exists.\n"
    }
for n in $(ls $DOTFILES_ROOT/bin/); do
    n="bin/$n"
    info "installing $n ... \c"
    cp -f $n ~/bin/ ; rtc=$?
    if [ "$rtc" -ne 0 ]; then { fail "copy failed."; exit $rtc ; } else { success "" ; } fi
done


#
# installing .vimrc
#
echo ""
info "installing .vimrc "
if [ -e ~/.vimrc ]; then
    warn "saving old .vimrc"
    mv -f ~/.vimrc ~/.vimrc.bak
fi
cp -f vim/vimrc ~/.vimrc
success "done"

#
# git binary
#
info "checking for git ..."
if [[ -x $(which git) ]]; then
    success " ... good."
else
    fail "git not found."
    info "trying to apt ..."
    sudo apt-get install git
    rtc=$?
    if [[ $rtc -eq 0 ]]; then
        success "done"
    else
        fail "cannot install git"
        exit 44
    fi
fi

#
# install Pictures
#
info "copying Pictures "
if [[ ! -d ~/Pictures ]] ; then
    mkdir ~/Pictures
fi
pwd -P
cp -f Pictures/* ~/Pictures/

#
# installing .gitconfig
#
info "installing .gitconfig "
if [ -e ~/.gitconfig ]; then
    warn "saving old .gitconfig"
    mv -f ~/.gitconfig ~/.gitconfig.bak
fi

#
# are we at home or in the office?
#
#ifconfig 2>/dev/null
#if [ $? -ne 0 ]; then
#    fail "cannot get ip, but thats OK now."
#    myNET="172"
#else
#    myIP=$(ifconfig | grep addr: | grep 192 | awk '{print$2}' | awk -F: '{print $2}')
#fi

myIP=$(ifconfig | grep addr: | grep 192 | awk '{print$2}' | awk -F: '{print $2}')
myNET=$(echo $myIP | awk -F. '{print $1 }')

if [[ "$myNET" -eq "192" || $HOSTNAME == *[Ss]wift* ]]; then
    echo "we're at home, baby"
    cp -f git/gitconfig ~/.gitconfig
    if [ $? -ne 0 ]; then fail "Cannot copy gitconfig"; exit 2 ; fi
else
    info "installing gitconfig.itsv ..."
    cp -f git/gitconfig.itsv ~/.gitconfig
    if [ $? -ne 0 ]; then fail "Cannot copy gitconfig.itsv"; exit 2 ;
    else success "done."
    fi
fi

echo ""

info "now we're cloning liquidpromt to $HOME ..."
cd $HOME
git clone https://github.com/nojhan/liquidprompt.git
if [[ $? -ne 0 ]]; then
    fail "whoops ... that didn't work!"
else
    #info "... and loading it."
    #source ~/liquidprompt/liquidprompt
    echo ""
fi

#
# Loading Wallpaper
#
info "loading default wallpaper ..."
~/bin/fehbg


#
# Getting tint2rc
#
cd -
info "Installing tint2rc-config-templates ..."
pwd
# ls -l tint2/tint2rc.*
cp tint2/tint2rc.* ~/.config/tint2/
info "Default tint2rc is:"
if [[ ! -e ~/.config/tint2/tint2rc ]]; then
    ln -s ~/.config/tint2/tint2rc.DB-Blue ~/.config/tint2/tint2rc
fi
ls -l ~/.config/tint2/tint2rc
#
# end
#
echo ""
success "that's it."
