#!/usr/bin/env ruby

require 'logger'
require 'colorize'
logger = Logger.new(STDOUT)
#logger.level = Logger.WARN

$stdout.sync = true
$stdin.sync = true

logger.formatter = proc do |severity, datetime, progname, msg|
    date_format = datetime.strftime("%Y-%m-%d %H:%M:%S").cyan + " "
    "#{severity.ljust(5)} [#{date_format}]: #{msg}\n"
end


task :default => [ :usage ]

task :debian => [ :apt, :bashrc, :vimrc, :sshconfig, :gitconfig, :bin_install, :pic_install, :tint2, :openbox, :openbox_themes, :rofi, :liquidprompt,  :post ]

task :chromebook => [ :bashrc, :vimrc, :sshconfig, :gitconfig, :bin_install, :liquidprompt, :post ]


os = RbConfig::CONFIG["host_os"]
homeDir = ENV["HOME"]
binDir = ENV["HOME"] + "/bin/"
home = homeDir

puts "You are runnig on " + os.yellow
puts "HOME is " + homeDir.yellow

################################################################################

task :usage do
  puts "Usage:"
  puts "rake [ debian | chromebook ]"
end


desc "git bash prompt setup".green
task :git_bash do
  sh("wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash")
  sh("wget https://raw.github.com/git/git/master/contrib/completion/git-prompt.sh")
end

desc "i3lock-fancy"
task :i3lock do
  puts '
  # cd $HOME/repositories
  # sudo apt install autoconf gcc make pkg-config libpam0g-dev libcairo2-dev libfontconfig1-dev libxcb-composite0-dev libev-dev libx11-xcb-dev libxcb-xkb-dev libxcb-xinerama0-dev libxcb-randr0-dev libxcb-image0-dev libxcb-util0-dev libxcb-xrm-dev libxkbcommon-dev libxkbcommon-x11-dev libjpeg-dev
  # git clone https://github.com/Raymo111/i3lock-color.git
  # cd i3lock-color
  # ./install-i3lock-color.sh
  # sudo apt-get install imagemagick
  # cd ..
  # git clone https://github.com/meskarune/i3lock-fancy.git
  # cd i3lock-fancy
  # sudo make install
  '
end

desc "ssh-config installation"
task :sshconfig do
  puts ""
  logger.info "installing .ssh/config".green
  if File.exists?(homeDir + '/.ssh/config')
    logger.warn "abort. config already exists. (we do not overwrite).".yellow
  end
  logger.info "done."
end


desc "vimrc installation"
task :vimrc do
  puts ""
  logger.info "installing .vimrc".green
  if File.exists?(homeDir + '/.vimrc')
    logger.warn "abort. config already exists. (we do not overwrite).".yellow
  else
    cp("vim/vimrc" , homeDir + '/.vimrc')
    logger.info "done."
  end
end


desc "openbox-themes installation"
task :openbox_themes do
  puts ""
  logger.info "installing some openbox themes ...".green
  target = homeDir + '/'
  sourcedir = '.themes'
  cp_r( sourcedir , target , verbose: true)
  logger.info "done."
end


desc "rofi configuration"
task :rofi do
  logger.info "rofi: nothing to do here."
end


desc "tint2 config-files installation"
task :tint2 do
  puts ""
  if File.exists?(homeDir + "/.config/tint2/")
    logger.info "target already exists"
  else
    mkdir_p(homeDir + "/.config/tint2")
  end
  logger.info "installing tint-config files".green
  tfile = FileList.new("tint2/*tint2rc*")
  tfile.each do |f|
    print ".".green
    cp( f , homeDir + "/.config/tint2/", verbose: false)
  end
  print "\n"
  logger.info "done."
end


desc "openbox configuration-files installation"
task :openbox do
  puts ""
  File.exists?(homeDir + "/.config/openbox/")
  logger.info "installing openbox configuration".green
  obfiles = FileList.new("openbox/*")
  begin
    obfiles.each do |f|
      cp( f , homeDir + "/.config/" + f )
    end
  rescue
    puts "cp failed .. maybe openbox is not installed or never run.".red
  end
  logger.info "done."
end



desc "git config-file installation"
task :gitconfig do
  logger.info "Creating a basic .gitconfig ...".green

  if File.exists?(homeDir + "/.gitconfig")
    logger.warn "File already exists"
  else
    print "Enter git username: "
    gituser = STDIN.gets.chomp
    print "Enter your email adress: "
    gitemail = STDIN.gets.chomp
    f = File.open("#{homeDir}" + "/.gitconfig", 'w')
    f.puts "[user]"
    f.puts "  name = #{gituser}"
    f.puts "  email = #{gitemail}"
    f.puts "
[color]
  branch = auto
  diff = auto
  status = auto
[color \"branch\"]
  current = green
  local = yellow
  remote = green
[color \"diff\"]
  meta = cyan bold
  frag = magenta bold
  old = red bold
  new = green bold
[color \"status\"]
  added = green
  changed = yellow
  untracked = red
[core]
  editor = vim
    "
    f.close
  end
end


desc ".bashrc - file installation"
task :bashrc do
  puts ""
  logger.info "installing some bashrc".green
  if os.include?('ming')
    logger.info os + " -environment"
    sourceFile = File.absolute_path('profile/bashrc.msysgit')
    logger.info "set sourcefile to #{sourceFile}"
  else
    logger.info os + " -environment"
    sourceFile = File.absolute_path('profile/bashrc')
    logger.info "set sourcefile to #{sourceFile}"
  end
  logger.info "installing .bashrc into #{homeDir} "
  cp( homeDir + '/.bashrc' , homeDir + '/.bashrc.bak' ) if File.exists?(homeDir + '/.bashrc')
  File.delete( homeDir + '/.bashrc' ) if File.exists?(homeDir + '/.bashrc')

  #File.symlink( pwd , homeDir + '/.bashrc' )
  cp( sourceFile , homeDir + '/.bashrc' )
logger.info "done."
end


desc "copy Pictures/* - files"
task :pic_install do
  puts ""
  unless File.exists?(homeDir + "/Pictures")
    mkdir_p(homeDir + "/Pictures")
  end
  logger.info "installing some stuff into #{homeDir}/Pictures/ ..." .green
  binFiles = FileList.new("Pictures/*")
  binFiles.each do |f|
    #logger.info("installing #{f}")
    #puts "installing #{f}".cyan
    print ".".yellow
    cp(f , homeDir + '/Pictures/', verbose: false)
  end
  print "\n"
  logger.info "done."
end


desc "bin/* - files installation "
task :bin_install do
  puts ""
  unless File.exists?(homeDir + "/bin")
    mkdir_p(homeDir + "/bin")
  end
  logger.info "installing some stuff into #{homeDir}/bin/".green
  binFiles = FileList.new("bin/*")
  binFiles.each do |f|
    #logger.info("installing #{f}")
    #puts "installing #{f}".cyan
    print ".".blue
    cp(f , homeDir + '/bin/', verbose: false)
  end
  print "\n"
  logger.info "done."
end


desc "Install some apt-packages"
task :apt do
  puts ""
  if os.include?('ming')
    logger.info "Nothing to do on #{os}"
  else
    logger.info "installing some pakages ...".green
    apt_list="ruby-dev ruby-bundler git lxterminal rofi rdesktop vpnc fonts-noto-mono fonts-noto scrot fonts-firacode thunar i3lock fonts-open-sans conky pavucontrol feh openbox openbox-menu obconf openbox-menu tint2 xfce4-power-manager orage"
    sh("sudo apt-get install #{apt_list}")
  end
  logger.info "done."
end


desc "bash_it clone and installation"
task :bashit do
  puts ""
  logger.info "installing bashit".green
  if os.include?('ming')
    logger.info "Nothing to do on #{os}"
  else
    logger.info("getting bash_it ...")
    sh("git clone https://github.com/Bash-it/bash-it.git $HOME/.bash_it") if not Dir.exist?(home + "/.bash_it")
    sh("cd $HOME/.bash_it && git checkout master && git pull origin master")
  end
  logger.info "done."
end


desc "liquidprompt installation"
task :liquidprompt do
  puts ""
  logger.info "getting liquidprompt ...".green
  sh("git clone https://github.com/nojhan/liquidprompt.git $HOME/.liquidprompt") if not Dir.exist?(home + "/.liquidprompt")
  sh("cd $HOME/.liquidprompt && git checkout master && git pull origin master")
end



desc "post-run"
task :post do
  puts ""
  logger.info "post - task"
  puts ""
  puts " * Hint: please check your gitconfig - email-address. ".red
  puts ""
  logger.info "finished."
end
